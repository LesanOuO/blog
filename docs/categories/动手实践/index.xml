<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>动手实践 on Lesan&#39;s Blog</title>
    <link>https://lesanouo.github.io/blog/categories/%E5%8A%A8%E6%89%8B%E5%AE%9E%E8%B7%B5/</link>
    <description>Recent content in 动手实践 on Lesan&#39;s Blog</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 24 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lesanouo.github.io/blog/categories/%E5%8A%A8%E6%89%8B%E5%AE%9E%E8%B7%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Nginx反向代理ONLYOFFICE</title>
      <link>https://lesanouo.github.io/blog/posts/code/175069440001/</link>
      <pubDate>Tue, 24 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/175069440001/</guid>
      <description>&lt;p&gt;本文通过使用Nginx反向代理ONLYOFFICE来解决在Vue代码中写死网络路径，让修改ONLYOFFICE路径变得更加方便，不用再烦恼每次更新都需要修改代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker安装ONLYOFFICE</title>
      <link>https://lesanouo.github.io/blog/posts/code/175060800002/</link>
      <pubDate>Mon, 23 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/175060800002/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ONLYOFFICE&lt;/code&gt;是一个值得推荐的软件，它能够帮助各种规模和类型的团队安全地在线协作处理文档。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文档编辑功能&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;支持多种格式：可以编辑Word、Excel、PowerPoint、PDF等多种常见格式的文件。&lt;/li&gt;
&lt;li&gt;兼容性强：与Microsoft Office和OpenOffice格式兼容，保证文件的互通性。&lt;/li&gt;
&lt;li&gt;多种编辑工具：提供丰富的文本编辑、表格功能、图形和图像插入等多种编辑工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;云办公支持&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;文档在线协作：支持多人同时编辑同一个文档，可以实时看到其他人的编辑内容。&lt;/li&gt;
&lt;li&gt;文件共享与管理：通过ONLYOFFICE平台，可以方便地管理和共享文件。&lt;/li&gt;
&lt;li&gt;文件版本控制：自动保存文档版本，支持版本回溯，确保文件的完整性和可追溯性。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;高度集成的工作平台&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;邮件、日历和任务管理：集成了邮件、日历、任务等管理功能，帮助团队协作和工作流优化。&lt;/li&gt;
&lt;li&gt;云存储：支持将文件存储在ONLYOFFICE云端，也支持第三方云存储（如Google Drive、Dropbox等）的集成。&lt;/li&gt;
&lt;li&gt;API接口：提供丰富的API，允许开发者定制或集成ONLYOFFICE到其他业务系统中。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;文件加密：支持文件加密功能，保护文件隐私。&lt;/li&gt;
&lt;li&gt;权限控制：可以设置不同用户的访问权限，确保敏感信息的安全。&lt;/li&gt;
&lt;li&gt;双重身份验证：增强安全性，防止未经授权的访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;跨平台支持&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;桌面端与移动端支持：提供Windows、macOS和Linux版本的桌面应用，还支持iOS和Android移动端应用。&lt;/li&gt;
&lt;li&gt;Web版：支持通过浏览器直接访问，避免设备限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;开放源码与自托管&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;开源版本：ONLYOFFICE提供免费开源版本，用户可以根据需要自定义和修改代码。&lt;/li&gt;
&lt;li&gt;自托管：允许企业将ONLYOFFICE部署在自己的服务器上，确保数据的安全和控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;集成与兼容性&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;与其他工具集成：可以与Microsoft Office、Google Workspace、Nextcloud等工具进行集成。&lt;/li&gt;
&lt;li&gt;插件支持：支持第三方插件，增强功能的灵活性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多&lt;code&gt;ONLYOFFICE&lt;/code&gt;相关信息可访问其&lt;a href=&#34;https://www.onlyoffice.com/zh/&#34;&gt;官网&lt;/a&gt;、&lt;a href=&#34;https://github.com/ONLYOFFICE/DocumentServer&#34;&gt;GitHub&lt;/a&gt;、&lt;a href=&#34;https://api.onlyoffice.com/&#34;&gt;开发文档&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL数据库定时全量与增量备份</title>
      <link>https://lesanouo.github.io/blog/posts/code/175017600001/</link>
      <pubDate>Wed, 18 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/175017600001/</guid>
      <description>&lt;p&gt;数据是无价的，对于数据库来说，由于人为或自然等等各种各样的突发事件，很容易导致数据错误或数据丢失等情况，甚至是数据库崩溃，所以为了保障数据的安全，我们需要对数据库进行有效的定时全量和增量备份来保护数据库。&lt;/p&gt;</description>
    </item>
    <item>
      <title>npm中windows-build-tools下载问题</title>
      <link>https://lesanouo.github.io/blog/posts/code/175000320001/</link>
      <pubDate>Mon, 16 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/175000320001/</guid>
      <description>&lt;p&gt;在学习一些老旧的项目时下载各种的依赖但是下载的时候一直提示失败，显示python的依赖一直下载不下来。&lt;/p&gt;
&lt;p&gt;通过以下命令就能成功下载&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm --python_mirror=https://registry.npmmirror.com/-/binary/python/ install --global windows-build-tools&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Downloading python-2.7.15.amd64.msi
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Error: getaddrinfo EAI_AGAIN www.python.org:443
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Downloading Python failed. Error: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; Error: getaddrinfo EAI_AGAIN www.python.org:443
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    at Object._errnoException &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;util.js:992:11&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    at errnoException &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dns.js:55:15&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    at GetAddrInfoReqWrap.onlookup &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;as oncomplete&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dns.js:92:26&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  code: &lt;span class=&#34;s1&#34;&gt;&amp;#39;EAI_AGAIN&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  errno: &lt;span class=&#34;s1&#34;&gt;&amp;#39;EAI_AGAIN&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  syscall: &lt;span class=&#34;s1&#34;&gt;&amp;#39;getaddrinfo&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  hostname: &lt;span class=&#34;s1&#34;&gt;&amp;#39;www.python.org&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  host: &lt;span class=&#34;s1&#34;&gt;&amp;#39;www.python.org&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  port: &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;windows-build-tools will now exit.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm ERR! code ELIFECYCLE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm ERR! errno &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm ERR! windows-build-tools@5.1.0 postinstall: &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;node ./dist/index.js&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm ERR! Exit status &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm ERR!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm ERR! Failed at the windows-build-tools@5.1.0 postinstall script.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Linux系统使用systemd配置.NET项目开机自启动</title>
      <link>https://lesanouo.github.io/blog/posts/code/171423360001/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/171423360001/</guid>
      <description>&lt;p&gt;本片文章记录在Linux（CentOS7）中如何使用&lt;code&gt;systemctl&lt;/code&gt;命令进行系统和服务管理&lt;/p&gt;
&lt;h2 id=&#34;systemctl命令&#34;&gt;&lt;code&gt;systemctl&lt;/code&gt;命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 设置开机自启动，可在任意目录下执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 启动nginx服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl start xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 停止开机自启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl disable xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看服务当前状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl status xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重新启动服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl restart xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看所有已启动的服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl list-units --type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建xxxservice&#34;&gt;创建xxx.service&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;/etc/systemd/system/&lt;/code&gt;路径下，新增一个&lt;code&gt;myTest.service&lt;/code&gt;文件，文件内容如下&lt;/p&gt;</description>
    </item>
    <item>
      <title>MAVEN私有仓库搭建与配置</title>
      <link>https://lesanouo.github.io/blog/posts/code/169531200001/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/169531200001/</guid>
      <description>&lt;p&gt;在工作中，公司内部往往需要一个私有的MAVEN仓库进行统一管理，本篇文章就带大家如何通过nexus搭建一个自己的MAVEN私有仓库&lt;/p&gt;
&lt;h2 id=&#34;下载-nexus-安装包&#34;&gt;下载 nexus 安装包&lt;/h2&gt;
&lt;p&gt;nexus官网地址：https://www.sonatype.com/products/sonatype-nexus-oss-download&lt;/p&gt;</description>
    </item>
    <item>
      <title>go程序注册为windows服务</title>
      <link>https://lesanouo.github.io/blog/posts/code/168960960001/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/168960960001/</guid>
      <description>&lt;p&gt;编写完go程序后编译成exe后，双击可正常执行，但是通过&lt;code&gt;sc&lt;/code&gt;注册为服务后启动报错&lt;code&gt;错误1053：服务没有及时响应启动或控制请求&lt;/code&gt;，百思不得其解，只能看看能不能有别的方式注册成服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringBoot实现大文件上传</title>
      <link>https://lesanouo.github.io/blog/posts/code/168831360001/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/168831360001/</guid>
      <description>&lt;p&gt;大文件上传是提高用户体验感的重要功能，像百度网盘、阿里网盘等等都支持断点续传和文件秒传功能，减少了网络波动和网络带宽对文件的限制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「文件分块」：将大文件拆分成小文件，将小文件上传\下载，最后再将小文件组装成大文件；&lt;/li&gt;
&lt;li&gt;「断点续传」：在文件分块的基础上，将每个小文件采用单独的线程进行上传\下载，如果碰到网络故障，可以从已经上传\下载的部分开始继续上传\下载未完成的部分，而没有必要从头开始上传\下载；&lt;/li&gt;
&lt;li&gt;「文件秒传」：资源服务器中已经存在该文件，其他人上传时直接返回该文件的URI。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将介绍SpringBoot中实现大文件上传的主要代码：&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringBoot&#43;Redisson实现延迟队列</title>
      <link>https://lesanouo.github.io/blog/posts/code/168814080001/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/168814080001/</guid>
      <description>&lt;p&gt;在电商、支付等系统中，一般都是先创建订单（支付单），再给用户一定的时间进行支付，如果没有按时支付的话，就需要把之前的订单（支付单）取消掉。&lt;/p&gt;
&lt;p&gt;这种类似的场景有很多，还有比如到期自动收货、超时自动退款、下单后自动发送短信等等都是类似的业务问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringBoot自建starter库</title>
      <link>https://lesanouo.github.io/blog/posts/code/168805440002/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/168805440002/</guid>
      <description>&lt;p&gt;本文用最短的时间给大家分享手写 starter 的完整流程。&lt;/p&gt;
&lt;h2 id=&#34;创建项目&#34;&gt;创建项目&lt;/h2&gt;
&lt;p&gt;首先我们用 IDEA 开发工具来初始化一个 Spring Boot 项目，注意 Java 版本不要选太高、Spring Boot 版本不要选 3.x&lt;/p&gt;
&lt;h2 id=&#34;引入依赖&#34;&gt;引入依赖&lt;/h2&gt;
&lt;p&gt;初始化项目后，我们要在项目依赖文件 pom.xml 中引入几个核心依赖：&lt;/p&gt;</description>
    </item>
    <item>
      <title>CentOS7系统安装</title>
      <link>https://lesanouo.github.io/blog/posts/code/166982400001/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/166982400001/</guid>
      <description>&lt;p&gt;本片文章记录个人安装CentOS7在台式主机上作为小型服务器&lt;/p&gt;
&lt;h2 id=&#34;制作u盘启动盘&#34;&gt;制作U盘启动盘&lt;/h2&gt;
&lt;h3 id=&#34;1-iso镜像下载&#34;&gt;1. iso镜像下载&lt;/h3&gt;
&lt;p&gt;可以通过&lt;a href=&#34;https://mirrors.aliyun.com/centos/7/isos/x86_64/&#34;&gt;阿里云镜像站&lt;/a&gt;下载iso文件，本人下载的是&lt;code&gt;CentOS-7-x86_64-DVD-2009.iso&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-下载启动盘制作软件&#34;&gt;2. 下载启动盘制作软件&lt;/h3&gt;
&lt;p&gt;可以通过软件&lt;a href=&#34;https://cn.ultraiso.net/xiazai.html&#34;&gt;UltraISO&lt;/a&gt;进行启动盘制作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开软件 -&amp;gt; 点击左上角&lt;code&gt;文件&lt;/code&gt; -&amp;gt; 选择&lt;code&gt;打开&lt;/code&gt; -&amp;gt; 打开对应iso&lt;/li&gt;
&lt;li&gt;点击菜单栏&lt;code&gt;启动&lt;/code&gt; -&amp;gt; 选择&lt;code&gt;写入硬盘镜像&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择对应U盘 -&amp;gt; 其余参数可默认&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装centos7&#34;&gt;安装CentOS7&lt;/h2&gt;
&lt;h3 id=&#34;1-插入u盘到主机&#34;&gt;1. 插入U盘到主机&lt;/h3&gt;
&lt;h3 id=&#34;2-配置-bios-制作u盘启动&#34;&gt;2. 配置 Bios 制作U盘启动&lt;/h3&gt;
&lt;h3 id=&#34;3-选择对应u盘后即可开始安装&#34;&gt;3. 选择对应U盘后即可开始安装&lt;/h3&gt;
&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过UltraISO刻入后安装会报错，无法正常安装&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;code&gt;Install CentOS 7&lt;/code&gt;时按下TAB键，屏幕下方会出现一串文字
&lt;code&gt;vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 rd.live.check quiet&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nginx配置Http和Https正向代理</title>
      <link>https://lesanouo.github.io/blog/posts/code/166939200012/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/166939200012/</guid>
      <description>&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt;配置&lt;code&gt;http&lt;/code&gt;代理非常简单，网上教程也很多，但是无法很方便的配置&lt;code&gt;https&lt;/code&gt;代理，本片文章将记录搭建可以同时代理&lt;code&gt;http&lt;/code&gt;和&lt;code&gt;https&lt;/code&gt;的服务器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringBoot&#43;Redis实现接口限流</title>
      <link>https://lesanouo.github.io/blog/posts/code/166939200011/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/166939200011/</guid>
      <description>&lt;p&gt;Redis 作为21世纪最流行的缓存中间件，它也能够实现接口限流的作用，本片文章主要记录个人实现过程。&lt;/p&gt;
&lt;p&gt;在分布式高并发系统中，常常需要用到 &lt;code&gt;缓存&lt;/code&gt; 、&lt;code&gt;降级&lt;/code&gt; 、 &lt;code&gt;限流&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringBoot优化Controller层代码</title>
      <link>https://lesanouo.github.io/blog/posts/code/166939200009/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/166939200009/</guid>
      <description>&lt;p&gt;本篇主要介绍的就是 &lt;code&gt;controller&lt;/code&gt; 层的一些优雅技巧，一个完整的后端请求由4部分组成：1. &lt;code&gt;接口地址&lt;/code&gt;(也就是URL地址)、2. &lt;code&gt;请求方式&lt;/code&gt;(一般就是get、set，当然还有put、delete)、3. &lt;code&gt;请求数据&lt;/code&gt;(request，有head跟body)、4. &lt;code&gt;响应数据&lt;/code&gt;(response)&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSE实现服务器推送</title>
      <link>https://lesanouo.github.io/blog/posts/code/166939200006/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/166939200006/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;服务端向客户端推送消息，其实除了可以用&lt;code&gt;WebSocket&lt;/code&gt;这种耳熟能详的机制外，还有一种服务器发送事件(&lt;code&gt;Server-sent events&lt;/code&gt;)，简称&lt;code&gt;SSE&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>STEP、IGES、STL等3D模型转换为GLB</title>
      <link>https://lesanouo.github.io/blog/posts/code/166939200005/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/166939200005/</guid>
      <description>&lt;p&gt;在用threejs渲染3D模型时，往往需要选择一个最适合的模型格式，通常都是使用GLB作为Web渲染模型。然而许多工业的模型往往都是以STEP或者IGES作为导出格式，这种格式对于目前主流的3D渲染库支持并不好，所以需要转换模型格式。本篇文章为个人通过查找总结的转换方法，虽然并不是最优解🙃。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何在.NET中开启静态文件访问</title>
      <link>https://lesanouo.github.io/blog/posts/code/165798720001/</link>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/165798720001/</guid>
      <description>&lt;h2 id=&#34;基本使用&#34;&gt;基本使用&lt;/h2&gt;
&lt;p&gt;静态文件（常见的有HTML，CSS，图片和JS等资源）可以通过 .NET Core 应用直接提供给客户端。还有一些比较常用的文件（PDF或者一些需要下载的文件）也是需要通过静态文件的方式提供下载的，如果没有搭建文件管理的服务器的话，通过静态文件的方式下载也是不错的选择。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux中修改Docker存储位置</title>
      <link>https://lesanouo.github.io/blog/posts/code/165669120001/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/165669120001/</guid>
      <description>&lt;p&gt;在维护服务器时，发现docker所在盘容量已满，导致mongodb插入数据失败从而崩溃。由此记录修改Linux中Dockder位置时遇到的问题&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vue中全局封装SignalR</title>
      <link>https://lesanouo.github.io/blog/posts/code/165591360001/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/165591360001/</guid>
      <description>&lt;h2 id=&#34;signalr-简介&#34;&gt;SignalR 简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ASP.NET&lt;/code&gt; SignalR 是一个供 &lt;code&gt;ASP.NET&lt;/code&gt; 开发人员使用的库，它简化了向应用程序添加实时 Web 功能的过程。实时 Web 功能是让服务器代码在内容可用时立即将内容推送到连接的客户端的能力，而不是让服务器等待客户端请求新数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker清理和限制容器日志大小</title>
      <link>https://lesanouo.github.io/blog/posts/code/165548160001/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/165548160001/</guid>
      <description>&lt;p&gt;&lt;code&gt;docker logs&lt;/code&gt; 是我们经常用来查看容器运行日志的命令，但是在长时间容器运行后，会产生大量的日志，会发现越来越慢，所以我们需要清理日志。&lt;/p&gt;
&lt;h2 id=&#34;docker-清理日志&#34;&gt;Docker 清理日志&lt;/h2&gt;
&lt;p&gt;通过命令 &lt;code&gt;docker inspect --format=&#39;{{.LogPath}}&#39; &amp;lt;容器ID&amp;gt;&lt;/code&gt; 查看容器的日志路径&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker为已启动容器添加挂载目录或端口映射</title>
      <link>https://lesanouo.github.io/blog/posts/code/165513600001/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/165513600001/</guid>
      <description>&lt;p&gt;在使用docker时，常常需要对已启动的容器进行相应的配置修改，其中最常见的就是挂载目录或端口映射。其实配置也并不是非常复杂，可以通过修改docker中的json配置文件即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux增加SSH端口</title>
      <link>https://lesanouo.github.io/blog/posts/code/165306240001/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/165306240001/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;在大型企业中，服务器网络一般都会有各种各样的限制，常见的就会有堡垒机或者运维网关，以达到操作审计等目的。但对于开发者来讲，这些限制大大降低了效率，所以我们需要一个方便的方式来解决这个问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记一次搭建GitLab&#43;Jenkins实现CI&amp;CD</title>
      <link>https://lesanouo.github.io/blog/posts/code/164874240001/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/164874240001/</guid>
      <description>&lt;p&gt;本篇文章记录本人搭建CI&amp;amp;CD实现持续集成和持续部署&lt;/p&gt;
&lt;h2 id=&#34;1使用docker安装gitlab&#34;&gt;1.使用docker安装gitlab&lt;/h2&gt;
&lt;h3 id=&#34;下载镜像-使用中文社区版&#34;&gt;下载镜像 （使用中文社区版）&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://lesanouo.github.io/blog/posts/code/164874240001/images/1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker pull twang2218/gitlab-ce-zh&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建所需目录为后续挂载文件&#34;&gt;创建所需目录为后续挂载文件&lt;/h3&gt;
&lt;p&gt;进入所需目录后，打开PowerShell，通过以下命令进行目录创建&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建一个带libgdiplus的.NET基础Docker镜像</title>
      <link>https://lesanouo.github.io/blog/posts/code/164831040001/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/164831040001/</guid>
      <description>&lt;p&gt;默认.NET的Docker镜像是不包含libgdiplus的，所以本文介绍如何通过在原有镜像基础上构建一个满足个人需求的Docker镜像。&lt;/p&gt;
&lt;h2 id=&#34;docker-简介&#34;&gt;Docker 简介&lt;/h2&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 &lt;strong&gt;Go 语言&lt;/strong&gt; 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在.NET中实现消息推送的三种方式</title>
      <link>https://lesanouo.github.io/blog/posts/code/164761920001/</link>
      <pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/code/164761920001/</guid>
      <description>&lt;p&gt;消息推送是大部分系统都需要做到的功能，在.NET中我分别通过RabbitMQ、MQTT、SignalR实现消息推送功能，本篇文章将通过它们实现简单的推送功能，手把手带大家完成编程。本文环境为 &lt;code&gt;.NET Core 3.1&lt;/code&gt;下&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
