<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C# on Lesan&#39;s Blog</title>
    <link>https://lesanouo.github.io/lesan-blog/tags/c%23/</link>
    <description>Recent content in C# on Lesan&#39;s Blog</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 26 Jun 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lesanouo.github.io/lesan-blog/tags/c%23/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C#中async和await异步编程</title>
      <link>https://lesanouo.github.io/lesan-blog/posts/knowledge/csharp-async-await/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/lesan-blog/posts/knowledge/csharp-async-await/</guid>
      <description>&lt;p&gt;在代码中遇到了网络请求编程时，往往需要异步编程才能给用户带来良好的体验，不会导致程序完全阻塞。
其中的关键在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步方法：再执行完成前就立刻返回调用方法，在调用方法执行过程中完成任务&lt;/li&gt;
&lt;li&gt;async/await 结构主要分为三个部分：
&lt;ol&gt;
&lt;li&gt;调用方法：该方法调用异步方法，然后在异步方法回调后继续执行后续程序&lt;/li&gt;
&lt;li&gt;异步方法：该方法异步执行程序，在被调用后立即返回到调用方法&lt;/li&gt;
&lt;li&gt;await 表达式：用于异步等待，指出需要异步执行的任务，且需要等待其完成。一个方法可以包含多个await&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是异步&#34;&gt;什么是异步&lt;/h2&gt;
&lt;p&gt;启动程序时，系统会在内存中创建一个新的进程。进程是构成运行程序资源的集合。在进程内部，有称为线程的内核对象，它代表的是真正的执行程序。系统会在 Main 方法的第一行语句就开始线程的执行。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
