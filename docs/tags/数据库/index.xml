<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>数据库 on Lesan&#39;s Blog</title>
    <link>https://lesanouo.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on Lesan&#39;s Blog</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 13 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lesanouo.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dynamic-datasource文档</title>
      <link>https://lesanouo.github.io/blog/posts/share/dynamic-datasource%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/share/dynamic-datasource%E6%96%87%E6%A1%A3/</guid>
      <description>&lt;p&gt;本文为 &lt;code&gt;dynamic-datasource-spring-boot-starter&lt;/code&gt; （基于SpringBoot的快速集成多数据源框架）的使用文档。&lt;/p&gt;
&lt;h1 id=&#34;特性&#34;&gt;特性&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;支持 &lt;code&gt;数据源分组&lt;/code&gt; ，适用于多种场景，纯粹多库、读写分离、一主多从、混合模式。&lt;/li&gt;
&lt;li&gt;支持数据库敏感配置信息 &lt;code&gt;加密(可自定义)&lt;/code&gt; ENC()。&lt;/li&gt;
&lt;li&gt;支持每个数据库独立初始化表结构schema和数据库database。&lt;/li&gt;
&lt;li&gt;支持无数据源启动，支持 &lt;code&gt;懒加载数据源&lt;/code&gt; （需要的时候再创建连接）。&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;自定义注解&lt;/code&gt; ，需继承DS(3.2.0+)。&lt;/li&gt;
&lt;li&gt;提供并简化对Druid，HikariCp，BeeCp，Dbcp2的快速集成。&lt;/li&gt;
&lt;li&gt;提供对 &lt;code&gt;Mybatis-Plus&lt;/code&gt; ，Quartz，ShardingJdbc，P6sy，Jndi等组件的集成方案。&lt;/li&gt;
&lt;li&gt;提供 &lt;code&gt;自定义数据源来源&lt;/code&gt; 方案（如全从数据库加载）。&lt;/li&gt;
&lt;li&gt;提供项目启动后 &lt;code&gt;动态增加移除数据源&lt;/code&gt; 方案。&lt;/li&gt;
&lt;li&gt;提供Mybatis环境下的 &lt;code&gt;纯读写分离&lt;/code&gt; 方案。&lt;/li&gt;
&lt;li&gt;提供使用 &lt;code&gt;spel动态参数&lt;/code&gt; 解析数据源方案。内置spel，session，header，支持自定义。&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;多层数据源嵌套切换&lt;/code&gt; 。（ServiceA &amp;raquo;&amp;gt; ServiceB &amp;raquo;&amp;gt; ServiceC）。&lt;/li&gt;
&lt;li&gt;提供 &lt;code&gt;基于seata的分布式事务方案&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;提供 &lt;code&gt;本地多数据源事务方案&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;约定&#34;&gt;约定&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;dynamic-datasource只做 &lt;code&gt;切换数据源&lt;/code&gt; 这件核心的事情，并 &lt;code&gt;不限制你的具体操作&lt;/code&gt; ，切换了数据源可以做任何CRUD。&lt;/li&gt;
&lt;li&gt;配置文件所有以下划线 &lt;code&gt;_&lt;/code&gt; 分割的数据源 &lt;code&gt;首部&lt;/code&gt; 即为组的名称，相同组名称的数据源会放在一个组下。&lt;/li&gt;
&lt;li&gt;切换数据源可以是组名，也可以是具体数据源名称。 &lt;code&gt;组名则切换时采用负载均衡算法切换&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;默认的数据源名称为 &lt;code&gt;master&lt;/code&gt; ，你可以通过 &lt;code&gt;spring.datasource.dynamic.primary&lt;/code&gt; 修改。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;方法上的注解优先于类上注解&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;DS支持继承抽象类上的DS，暂不支持继承接口上的DS。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;使用方法&#34;&gt;使用方法&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;引入dynamic-datasource-spring-boot-starter&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;spring-boot 1.5.x、2.x.x&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库优化</title>
      <link>https://lesanouo.github.io/blog/posts/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h1 id=&#34;索引&#34;&gt;索引&lt;/h1&gt;
&lt;h2 id=&#34;mysql-索引&#34;&gt;MySQL 索引&lt;/h2&gt;
&lt;p&gt;MySQL 的索引有两种分类方式：逻辑分类和物理分类&lt;/p&gt;
&lt;h3 id=&#34;逻辑分类&#34;&gt;逻辑分类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;主键索引：一张表只能有一个主键索引，不允许重复、不允许为 NULL&lt;/li&gt;
&lt;li&gt;唯一索引：数据列不允许重复，允许为 NULL 值，一张表可有多个唯一索引，索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一&lt;/li&gt;
&lt;li&gt;普通索引：一张表可以创建多个普通索引，一个普通索引可以包含多个字段，允许数据重复，允许 NULL 值插入&lt;/li&gt;
&lt;li&gt;全文索引：它查找的是文本中的关键词，主要用于全文检索&lt;/li&gt;
&lt;li&gt;单例索引：一个索引只包含一个列，一个表可以有多个单例索引&lt;/li&gt;
&lt;li&gt;组合索引：一个组合索引包含两个或两个以上的列。查询的时候遵循 mysql 组合索引的 “最左前缀”原则，即使用 where 时条件要按照建立索引的时候字段的排列方式放置索引才会生效&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;物理分类&#34;&gt;物理分类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;聚簇索引：不是单独的一种索引类型，而是一种数据存储方式。这种存储方式是依靠B+树来实现的，根据表的主键构造一棵B+树且B+树叶子节点存放的都是表的行记录数据时，方可称该主键索引为聚簇索引。聚簇索引也可理解为将数据存储与索引放到了一块，找到索引也就找到了数据。&lt;/li&gt;
&lt;li&gt;非聚簇索引：数据和索引是分开的，B+树叶子节点存放的不是数据表的行记录&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;explain&#34;&gt;EXPLAIN&lt;/h3&gt;
&lt;p&gt;使用格式：&lt;code&gt;EXPLAIN SQL...&lt;/code&gt;;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
