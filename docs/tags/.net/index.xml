<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>.NET on Lesan&#39;s Blog</title>
    <link>https://lesanouo.github.io/blog/tags/.net/</link>
    <description>Recent content in .NET on Lesan&#39;s Blog</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lesanouo.github.io/blog/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux系统使用systemd配置.NET项目开机自启动</title>
      <link>https://lesanouo.github.io/blog/posts/operation/linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8systemd%E9%85%8D%E7%BD%AE.net%E9%A1%B9%E7%9B%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/operation/linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8systemd%E9%85%8D%E7%BD%AE.net%E9%A1%B9%E7%9B%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/</guid>
      <description>&lt;p&gt;本片文章记录在Linux（CentOS7）中如何使用&lt;code&gt;systemctl&lt;/code&gt;命令进行系统和服务管理&lt;/p&gt;
&lt;h2 id=&#34;systemctl命令&#34;&gt;&lt;code&gt;systemctl&lt;/code&gt;命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 设置开机自启动，可在任意目录下执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 启动nginx服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl start xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 停止开机自启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl disable xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看服务当前状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl status xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重新启动服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl restart xxx.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看所有已启动的服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl list-units --type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建xxxservice&#34;&gt;创建xxx.service&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;/etc/systemd/system/&lt;/code&gt;路径下，新增一个&lt;code&gt;myTest.service&lt;/code&gt;文件，文件内容如下&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于.NET的面试笔记</title>
      <link>https://lesanouo.github.io/blog/posts/share/%E5%85%B3%E4%BA%8E.net%E7%9A%84%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/share/%E5%85%B3%E4%BA%8E.net%E7%9A%84%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;net-基础&#34;&gt;.net 基础&lt;/h2&gt;
&lt;p&gt;1、Task和Thread有什么区别&lt;/p&gt;
&lt;p&gt;2、当执行遇到await的时候会执行什么动作&lt;/p&gt;
&lt;p&gt;3、事件和委托之间的区别，Action和func的区别&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/RaindayXia/p/5261797.html&#34;&gt;https://www.cnblogs.com/RaindayXia/p/5261797.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mikeblog.cn/article/details/5236&#34;&gt;http://mikeblog.cn/article/details/5236&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、Dictionary在多线程并发的情况下会出现什么问题，ConcurrentDictionary之间的区别&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何在.NET中开启静态文件访问</title>
      <link>https://lesanouo.github.io/blog/posts/operation/%E5%A6%82%E4%BD%95%E5%9C%A8.net%E4%B8%AD%E5%BC%80%E5%90%AF%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/operation/%E5%A6%82%E4%BD%95%E5%9C%A8.net%E4%B8%AD%E5%BC%80%E5%90%AF%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE/</guid>
      <description>&lt;h2 id=&#34;基本使用&#34;&gt;基本使用&lt;/h2&gt;
&lt;p&gt;静态文件（常见的有HTML，CSS，图片和JS等资源）可以通过 .NET Core 应用直接提供给客户端。还有一些比较常用的文件（PDF或者一些需要下载的文件）也是需要通过静态文件的方式提供下载的，如果没有搭建文件管理的服务器的话，通过静态文件的方式下载也是不错的选择。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在.NET中Task与Thread区别</title>
      <link>https://lesanouo.github.io/blog/posts/knowledge/%E5%9C%A8.net%E4%B8%ADtask%E4%B8%8Ethread%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 26 Jun 2022 11:17:47 +0800</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/knowledge/%E5%9C%A8.net%E4%B8%ADtask%E4%B8%8Ethread%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;h2 id=&#34;什么是-thread&#34;&gt;什么是 Thread&lt;/h2&gt;
&lt;p&gt;当我们提及多线程的时候会想到 Thread 和 Threadpool，这都是异步操作，Threadpool 其实就是 Thread 的集合，具有很多优势，不过在任务多的时候全局队列会存在竞争而消耗资源。Thread 默认为前台线程，主程序必须等线程跑完才会关闭，而 Threadpool 相反。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vue中全局封装SignalR</title>
      <link>https://lesanouo.github.io/blog/posts/operation/vue%E4%B8%AD%E5%85%A8%E5%B1%80%E5%B0%81%E8%A3%85signalr/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/operation/vue%E4%B8%AD%E5%85%A8%E5%B1%80%E5%B0%81%E8%A3%85signalr/</guid>
      <description>&lt;h2 id=&#34;signalr-简介&#34;&gt;SignalR 简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ASP.NET&lt;/code&gt; SignalR 是一个供 &lt;code&gt;ASP.NET&lt;/code&gt; 开发人员使用的库，它简化了向应用程序添加实时 Web 功能的过程。实时 Web 功能是让服务器代码在内容可用时立即将内容推送到连接的客户端的能力，而不是让服务器等待客户端请求新数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建一个带libgdiplus的.NET基础Docker镜像</title>
      <link>https://lesanouo.github.io/blog/posts/operation/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B8%A6libgdiplus%E7%9A%84.net%E5%9F%BA%E7%A1%80docker%E9%95%9C%E5%83%8F/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/operation/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B8%A6libgdiplus%E7%9A%84.net%E5%9F%BA%E7%A1%80docker%E9%95%9C%E5%83%8F/</guid>
      <description>&lt;p&gt;默认.NET的Docker镜像是不包含libgdiplus的，所以本文介绍如何通过在原有镜像基础上构建一个满足个人需求的Docker镜像。&lt;/p&gt;
&lt;h2 id=&#34;docker-简介&#34;&gt;Docker 简介&lt;/h2&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 &lt;strong&gt;Go 语言&lt;/strong&gt; 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在.NET中实现消息推送的三种方式</title>
      <link>https://lesanouo.github.io/blog/posts/operation/%E5%9C%A8.net%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/operation/%E5%9C%A8.net%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;消息推送是大部分系统都需要做到的功能，在.NET中我分别通过RabbitMQ、MQTT、SignalR实现消息推送功能，本篇文章将通过它们实现简单的推送功能，手把手带大家完成编程。本文环境为 &lt;code&gt;.NET Core 3.1&lt;/code&gt;下&lt;/p&gt;</description>
    </item>
    <item>
      <title>RabbitMQ笔记</title>
      <link>https://lesanouo.github.io/blog/posts/knowledge/rabbitmq%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://lesanouo.github.io/blog/posts/knowledge/rabbitmq%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;rabbitmq简述&#34;&gt;RabbitMQ简述&lt;/h2&gt;
&lt;p&gt;MQ全称为Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法。RabbitMQ是一个在AMQP基础上完整的，可复用的企业消息系统。他遵循Mozilla Public License开源协议。AMQP(高级消息队列协议) 是一个异步消息传递所使用的应用层协议规范，作为线路层协议，而不是API（例如JMS），AMQP 客户端能够无视消息的来源任意发送和接受信息。AMQP的原始用途只是为金融界提供一个可以彼此协作的消息协议，而现在的目标则是为通用消息队列架构提供通用构建工具。因此，面向消息的中间件 （MOM）系统，例如发布/订阅队列，没有作为基本元素实现。AMQP当中有四个概念非常重要（一个虚拟主机持有一组交换机、队列和绑定）：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
